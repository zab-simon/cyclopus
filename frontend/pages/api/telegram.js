import OpenAI from "openai";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).send("Only POST allowed");

  try {
    const body = req.body;
    const message = body?.message?.text;
    const chatId = body?.message?.chat?.id;

    console.log("TG IN:", message);

    if (!message || !chatId)
      return res.status(400).send("No message or chat ID");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if (message === "/start") {
      await sendTelegram(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Cyclopus AI Analyst. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.");
      return res.status(200).send("OK");
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π OpenAI –∑–∞–ø—Ä–æ—Å
    const completion = await client.responses.create({
      model: "gpt-4o-mini",
      input: message,
    });

    const answer = completion.output_text || "‚ö†Ô∏è No response";

    await sendTelegram(chatId, answer);
    res.status(200).send("OK");
  } catch (e) {
    console.error("TG handler error:", e.message);
    await safeTelegramFallback(e.message);
    res.status(500).json({ error: e.message });
  }
}

// üîß –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegram(chatId, text) {
  try {
    await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: chatId, text }),
      }
    );
  } catch (err) {
    console.error("TG sendMessage failed:", err.message);
  }
}

// üõ° fallback ‚Äî –ª–æ–≥–∏—Ä—É–µ—Ç –≤ Supabase –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å
async function safeTelegramFallback(msg) {
  console.error("‚ö†Ô∏è OpenAI error fallback:", msg);
}
